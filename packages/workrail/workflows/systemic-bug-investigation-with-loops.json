{
    "id": "systematic-bug-investigation-with-loops",
    "name": "Systematic Bug Investigation Workflow",
    "version": "1.0.0",
    "description": "A comprehensive workflow for systematic bug and failing test investigation that prevents LLMs from jumping to conclusions. Enforces thorough evidence gathering, hypothesis formation, debugging instrumentation, and validation to achieve near 100% certainty about root causes. This workflow does NOT fix bugs - it produces detailed diagnostic writeups that enable effective fixing by providing complete understanding of what is happening, why it's happening, and supporting evidence.",
    "clarificationPrompts": [
        "What type of system is this? (web app, mobile app, backend service, desktop app, etc.)",
        "How consistently can you reproduce this bug? (always reproducible, sometimes reproducible, rarely reproducible)",
        "What was the last known working version or state if applicable?",
        "Are there any time constraints or urgency factors for this investigation?",
        "What level of system access do you have? (full codebase, limited access, production logs only)",
        "Do you have preferences for handling large log volumes? (sub-chat analysis, inline summaries only, or no preference for automatic decision)"
    ],
    "preconditions": [
        "User has identified a specific bug or failing test to investigate",
        "Agent has access to codebase analysis tools (grep, file readers, etc.)",
        "Agent has access to build/test execution tools for the project type",
        "User can provide error messages, stack traces, or test failure output",
        "Bug is reproducible with specific steps or a minimal test case"
    ],
    "metaGuidance": [
        "**FUNCTION DEFINITIONS:**",
        "fun instrumentCode(location, hypothesis) = 'Add debug logs at {location} for {hypothesis}. Format: ClassName.method [{hypothesis}]: message. Include timestamp, thread ID if concurrent.'",
        "fun collectEvidence(hypothesis) = 'Run instrumented code, collect logs, analyze results. Score evidence quality 1-10. Document in Evidence/{hypothesis}.md.'",
        "fun updateHypothesisLog(id, status, evidence) = 'Update INVESTIGATION_CONTEXT.md section {id} with {status} and {evidence}. Include confidence score.'",
        "fun analyzeTests(component) = 'Find all tests for {component} using grep_search. Check coverage, recent changes, what they validate vs miss. Run with --debug flag.'",
        "fun recursiveAnalysis(component, depth=3) = 'Analyze {component} to {depth} levels. L1: implementation, L2: direct deps, L3: transitive deps. Document each level.'",
        "fun controlledModification(type, location) = 'Make {type} change at {location}. Types: guard (add logging), assert (add assertion), fix (minimal fix), break (controlled failure). Commit: DEBUG: {type} at {location}'",
        "fun checkHypothesisInTests(hypothesis) = 'Search existing tests for evidence. Direct: tests of suspected components. Indirect: tests that would fail if true. Document in TestEvidence/{hypothesis}.md'",
        "fun aggregateDebugLogs(pattern, timeWindow=100) = 'Deduplicate logs matching {pattern}. Output: {pattern} x{count} in {timeWindow}ms, variations: {unique_values}'",
        "fun createInvestigationBranch() = 'git checkout -b investigate/{bug-id}-{timestamp}. If git unavailable, create Investigation/{timestamp}/ directory for artifacts.'",
        "fun trackInvestigation(phase, status) = 'Update INVESTIGATION_CONTEXT.md progress: ✅ {completed}, 🔄 {phase}, ⏳ Remaining: {list}, 📊 Confidence: {score}/10'",
        "",
        "**USAGE:** When you see function calls like instrumentCode() or analyzeTests(), execute the full instructions defined above.",
        "",
        "INVESTIGATION DISCIPLINE: Never propose fixes or solutions until Phase 6 (Comprehensive Diagnostic Writeup). Focus entirely on systematic evidence gathering and analysis.",
        "HYPOTHESIS RIGOR: All hypotheses must be based on concrete evidence from code analysis with quantified scoring (1-10 scales). Maximum 5 hypotheses per investigation.",
        "DEBUGGING INSTRUMENTATION: Always implement debugging mechanisms before running tests - logs, print statements, or test modifications that will provide evidence.",
        "EVIDENCE THRESHOLD: Require minimum 3 independent sources of evidence before confirming any hypothesis. Use objective verification criteria.",
        "SYSTEMATIC PROGRESSION: Complete each investigation phase fully before proceeding. Each phase builds critical context for the next with structured documentation.",
        "CONFIDENCE CALIBRATION: Use mathematical confidence framework with 9.0/10 minimum threshold. Actively challenge conclusions with adversarial analysis.",
        "UNCERTAINTY ACKNOWLEDGMENT: Explicitly document all remaining unknowns and their potential impact. No subjective confidence assessments.",
        "THOROUGHNESS: For complex bugs, recursively analyze dependencies and internals of identified components to ensure full picture.",
        "TEST INTEGRATION: Leverage existing tests to validate hypotheses where possible.",
        "**LOGGING STANDARDS:**",
        "LOG FORMAT: Always use 'ClassName.methodName [hypothesisId] {timestamp}: message'. For concurrent code, add thread/worker ID.",
        "LOG DEDUPLICATION: Implement in debug code: if (lastMsg === currentMsg) { count++; if (count % 10 === 0) log(`${msg} x${count}`); } else { if (count > 1) log(`Previous: x${count}`); log(currentMsg); count = 1; }",
        "LOG AGGREGATION: For high-frequency events, create summaries: 'Event X occurred 847 times between 10:23:45-10:23:47, unique values: [val1: 623, val2: 224]'",
        "LOG WINDOWS: Group related logs within 50-100ms. Mark groups with '=== Operation: XYZ Start ===' and '=== Operation: XYZ End (duration: 73ms) ==='",
        "LOG CONTEXT: Include hypothesis ID in all debug logs. Use prefixes like 'H1_DEBUG:', 'H2_TRACE:', 'H3_ERROR:'",
        "LOG ANALYSIS OFFLOADING: For voluminous logs (>500 lines), offload analysis to sub-chats with structured prompts. See Phase 4 for detailed sub-analysis implementation.",
        "RECURSION DEPTH: Limit recursive analysis to 3 levels deep to prevent analysis paralysis while ensuring thoroughness.",
        "INVESTIGATION BOUNDS: If investigation exceeds 20 steps or 4 hours without root cause, pause and reassess approach with user.",
        "AUTOMATION LEVELS: High=auto-approve >8.0 confidence decisions, Medium=standard confirmations, Low=extra confirmations for safety. Control workflow autonomy based on user preference.",
        "CONTEXT DOCUMENTATION: Maintain INVESTIGATION_CONTEXT.md throughout. Update after major milestones, failures, or user interventions to enable seamless handoffs between sessions.",
        "GIT FALLBACK STRATEGY: If git unavailable, gracefully skip commits/branches, log changes manually in CONTEXT.md with timestamps, warn user, document modifications for manual control.",
        "GIT ERROR HANDLING: Use run_terminal_cmd for git operations; if fails, output exact command for user manual execution. Never halt investigation due to git unavailability.",
        "TOOL AVAILABILITY AWARENESS: Check debugging tool availability before investigation design. Have fallbacks for when primary tools unavailable (grep→file_search, etc).",
        "SECURITY PROTOCOLS: Sanitize sensitive data in logs/reproduction steps. Be mindful of exposing credentials, PII, or system internals during evidence collection phases.",
        "DYNAMIC RE-TRIAGE: Allow complexity upgrades during investigation if evidence reveals deeper issues. Safe downgrades only with explicit user confirmation after evidence review.",
        "DEVIL'S ADVOCATE REVIEW: Actively challenge primary hypothesis with available evidence. Seek alternative explanations and rate alternative likelihood before final confidence assessment.",
        "COLLABORATIVE HANDOFFS: Structure documentation for peer review and team coordination. Include methodology, reasoning, and complete evidence chain for knowledge transfer.",
        "FAILURE BOUNDS: Track investigation progress. If >20 steps or >4 hours without breakthrough, pause for user guidance. Document dead ends to prevent redundant work in future sessions.",
        "COGNITIVE BREAKS: After 10 investigation steps, pause and summarize progress to reset perspective.",
        "RUBBER DUCK: Verbalize hypotheses in sub-prompts to externalize reasoning and catch logical gaps.",
        "COLLABORATION READY: Document clearly for handoffs when stuck beyond iteration limits."
    ],
    "steps": [
        {
            "id": "phase-0-triage",
            "title": "Phase 0: Initial Triage & Context Gathering",
            "prompt": "**SYSTEMATIC INVESTIGATION BEGINS** - Your mission is to achieve near 100% certainty about this bug's root cause through systematic evidence gathering. NO FIXES will be proposed until Phase 6.\n\n**STEP 1: Bug Report Analysis**\nPlease provide the complete bug context:\n- **Bug Description**: What is the observed behavior vs expected behavior?\n- **Error Messages/Stack Traces**: Paste the complete error output\n- **Reproduction Steps**: How can this bug be consistently reproduced?\n- **Environment Details**: OS, language version, framework version, etc.\n- **Recent Changes**: Any recent commits, deployments, or configuration changes?\n\n**STEP 2: Project Type Classification**\nBased on the information provided, I will classify the project type and set debugging strategies:\n- **Languages/Frameworks**: Primary tech stack\n- **Build System**: Maven, Gradle, npm, etc.\n- **Testing Framework**: JUnit, Jest, pytest, etc.\n- **Logging System**: Available logging mechanisms\n- **Architecture**: Monolithic, microservices, distributed, serverless, etc.\n\n**STEP 3: Complexity Assessment**\nI will analyze the bug complexity using these criteria:\n- **Simple**: Single function/method, clear error path, minimal dependencies\n- **Standard**: Multiple components, moderate investigation required\n- **Complex**: Cross-system issues, race conditions, complex state management\n\n**OUTPUTS**: Set `projectType`, `bugComplexity`, `debuggingMechanism`, and `isDistributed` (true if architecture involves microservices/distributed systems) context variables.",
            "agentRole": "You are a senior debugging specialist and bug triage expert with 15+ years of experience across multiple technology stacks. Your expertise lies in quickly classifying bugs, understanding project architectures, and determining appropriate investigation strategies. You excel at extracting critical information from bug reports and setting up systematic investigation approaches.",
            "guidance": [
                "CLASSIFICATION ACCURACY: Proper complexity assessment determines investigation depth - be thorough but decisive",
                "CONTEXT CAPTURE: Gather complete environmental and situational context now to avoid gaps later",
                "DEBUGGING STRATEGY: Choose debugging mechanisms appropriate for the project type and bug complexity",
                "NO ASSUMPTIONS: If critical information is missing, explicitly request it before proceeding"
            ]
        },
        {
            "id": "phase-0a-assumption-check",
            "title": "Phase 0a: Assumption Verification Checkpoint",
            "prompt": "**ASSUMPTION CHECK** - Before proceeding, verify key assumptions to prevent bias.\n\n**VERIFY**:\n1. **Data State**: Confirm variable types and null handling\n2. **API/Library**: Check documentation for actual vs assumed behavior\n3. **Environment**: Verify bug exists in clean environment\n4. **Recent Changes**: Review last 5 commits for relevance\n\n**OUTPUT**: List verified assumptions with evidence sources.",
            "agentRole": "You are a skeptical analyst who challenges every assumption. Question everything that hasn't been explicitly verified.",
            "guidance": [
                "Use analysis tools to verify, don't assume",
                "Document each assumption with its verification method",
                "Flag any unverifiable assumptions for tracking",
                "CHECK API DOCS: Never assume function behavior from names - verify actual documentation",
                "VERIFY DATA TYPES: Use debugger or logs to confirm actual runtime types and values",
                "TEST ENVIRONMENT: Reproduce in minimal environment to rule out configuration issues"
            ]
        },
        {
            "id": "phase-0b-reproducibility-loop",
            "type": "loop",
            "title": "Phase 0b: Reproducibility Verification Loop",
            "loop": {
                "type": "for",
                "count": 3,
                "maxIterations": 3,
                "iterationVar": "reproductionAttempt"
            },
            "body": [
                {
                    "id": "reproduce-bug",
                    "title": "Reproduction Attempt {{reproductionAttempt}}/3",
                    "prompt": "**REPRODUCTION ATTEMPT {{reproductionAttempt}}/3**\n\nExecute the provided reproduction steps:\n1. Follow exact steps from bug report\n2. Document outcome (Success/Failure)\n3. Note any variations in behavior\n4. Capture error messages/stack traces\n\n**Update context:**\n- Set `reproductionResults[{{reproductionAttempt - 1}}]` = true/false\n- If failed, document why\n- Track any intermittent patterns",
                    "agentRole": "You are systematically verifying bug reproducibility to ensure solid investigation foundation.",
                    "guidance": [
                        "Execute exactly as specified",
                        "Document any deviations",
                        "Capture all error details"
                    ],
                    "requireConfirmation": false
                }
            ],
            "requireConfirmation": false
        },
        {
            "id": "phase-0c-reproducibility-assessment",
            "title": "Phase 0c: Reproducibility Assessment",
            "prompt": "**ASSESS REPRODUCIBILITY**\n\nBased on 3 reproduction attempts:\n- **Success Rate**: Calculate percentage\n- **Pattern Analysis**: Identify any intermittent patterns\n- **Minimal Reproduction**: Create simplified test case if needed\n\n**DECISION:**\n- If 100% reproducible: Proceed to Phase 1\n- If intermittent: Apply stress techniques and document patterns\n- If 0% reproducible: Request more information from user\n\n**Set `isReproducible` = true/false based on assessment**",
            "agentRole": "You are assessing reproduction results to determine investigation viability.",
            "guidance": [
                "100% reproduction is ideal but not always required",
                "Document intermittent patterns for investigation",
                "Create minimal test case for complex scenarios"
            ],
            "validationCriteria": [
                {
                    "type": "contains",
                    "value": "reproducib",
                    "message": "Must make reproducibility determination"
                }
            ],
            "hasValidation": true,
            "runCondition": {
                "var": "reproductionAttempt",
                "equals": 3
            }
        },
        {
            "id": "phase-1-iterative-analysis",
            "type": "loop",
            "title": "Phase 1: Multi-Dimensional Codebase Analysis",
            "runCondition": {
                "var": "isReproducible",
                "equals": true
            },
            "loop": {
                "type": "for",
                "count": 4,
                "maxIterations": 4,
                "iterationVar": "analysisPhase"
            },
            "body": [
                {
                    "id": "analysis-iteration",
                    "title": "Analysis Phase {{analysisPhase}}/4: {{analysisPhase === 1 ? 'Breadth Scan' : analysisPhase === 2 ? 'Component Deep Dive' : analysisPhase === 3 ? 'Dependency & Flow Analysis' : 'Test Coverage Analysis'}}",
                    "prompt": "{{analysisPhase === 1 ? '**BREADTH SCAN - Cast Wide Net**\\n\\nGoal: Understand full system impact and identify all potentially involved components.\\n\\n1. **Error Propagation Mapping**:\\n   - Use grep_search for all error occurrences\\n   - Trace error messages across all log files\\n   - Map all stack traces to identify call chains\\n\\n2. **Component Discovery**:\\n   - Find ALL components that interact with failing area\\n   - Use codebase_search: \"How is [failing component] used?\"\\n   - Identify all callers and callees\\n\\n3. **Data Flow Mapping**:\\n   - Trace data that flows through bug area\\n   - Identify all transformations\\n   - Find all persistence points\\n\\n4. **Recent Changes**:\\n   - Git history for all identified components\\n   - Check last 10 commits affecting these areas\\n\\n**Output**: Complete BreadthAnalysis.md with interaction map and suspicious areas ranked by likelihood.' : analysisPhase === 2 ? '**COMPONENT DEEP DIVE - Understand Internals**\\n\\nGoal: Deep understanding of top 5 suspicious components from breadth scan.\\n\\nFor each component, use recursiveAnalysis(component, 3):\\n\\n1. **Level 1 - Direct Implementation**:\\n   - Read COMPLETE file including private methods\\n   - Understand state management\\n   - Analyze error handling\\n   - Check initialization/cleanup\\n\\n2. **Level 2 - Direct Dependencies**:\\n   - Follow all imports\\n   - Understand dependency contracts\\n   - Check version compatibility\\n   - Analyze coupling points\\n\\n3. **Level 3 - Integration Points**:\\n   - How component fits in larger system\\n   - Side effects and external calls\\n   - Concurrency/threading concerns\\n   - Resource management\\n\\n**Output**: ComponentAnalysis.md with deep insights for each suspicious component.' : analysisPhase === 3 ? '**DEPENDENCY & FLOW ANALYSIS - Trace Connections**\\n\\nGoal: Understand how components interact and data flows between them.\\n\\n1. **Static Dependency Graph**:\\n   - Build import/dependency tree\\n   - Identify circular dependencies\\n   - Find hidden dependencies (reflection, dynamic loading)\\n\\n2. **Runtime Flow Analysis**:\\n   - Trace execution paths leading to bug\\n   - Identify async/concurrent flows\\n   - Map state changes through execution\\n\\n3. **Data Transformation Pipeline**:\\n   - Track data from input to error point\\n   - Document each transformation\\n   - Identify validation points\\n   - Find where data could be corrupted\\n\\n4. **Integration Analysis**:\\n   - External service calls\\n   - Database interactions\\n   - Message queue operations\\n   - File system operations\\n\\n**Output**: FlowAnalysis.md with sequence diagrams and data flow maps.' : '**TEST COVERAGE ANALYSIS - Leverage Existing Knowledge**\\n\\nGoal: Use existing tests as source of truth about system behavior.\\n\\nFor each suspicious component, use analyzeTests(component):\\n\\n1. **Direct Test Coverage**:\\n   - Find all tests for component\\n   - Analyze what aspects are tested\\n   - Identify what is NOT tested\\n   - Check test quality/assertions\\n\\n2. **Integration Test Analysis**:\\n   - Find tests that exercise bug area\\n   - Analyze test assumptions\\n   - Check for flaky tests\\n   - Review disabled/skipped tests\\n\\n3. **Test History Investigation**:\\n   - When were tests added/modified?\\n   - Do test changes correlate with bug appearance?\\n   - Were any tests removed recently?\\n\\n4. **Test Execution with Debugging**:\\n   - Run relevant tests with debug flags\\n   - Add instrumentation to tests\\n   - Compare expected vs actual behavior\\n\\n**Output**: TestAnalysis.md with coverage gaps and test evidence matrix.'}}",
                    "agentRole": "You are performing systematic analysis phase {{analysisPhase}} of 4. Your focus is {{analysisPhase === 1 ? 'casting a wide net to find all potentially related components' : analysisPhase === 2 ? 'deep diving into the most suspicious components to understand their internals' : analysisPhase === 3 ? 'tracing how components connect and data flows between them' : 'leveraging existing tests to understand expected behavior and find coverage gaps'}}.",
                    "guidance": [
                        "This is analysis phase {{analysisPhase}} of 4 total phases",
                        "Each phase builds on previous findings",
                        "Create a structured markdown file for each phase output",
                        "Use the function definitions for standardized operations",
                        "If you discover the bug's root cause with high confidence, note it but complete all analysis phases for thoroughness",
                        "Update INVESTIGATION_CONTEXT.md after each phase with key findings"
                    ],
                    "requireConfirmation": false
                }
            ],
            "requireConfirmation": false
        },
        {
            "id": "phase-1a-binary-search",
            "title": "Phase 1a: Binary Search Isolation",
            "runCondition": {
                "or": [
                    {"var": "bugType", "equals": "regression"},
                    {"var": "searchSpace", "equals": "large"}
                ]
            },
            "prompt": "**BINARY SEARCH** - Apply divide-and-conquer:\n\n1. Identify GOOD state (working) and BAD state (broken)\n2. Find midpoint in history/code/data\n3. Test midpoint state\n4. Narrow to relevant half\n5. Document reduced search space\n\n**OUTPUT**: Narrowed location with evidence.",
            "agentRole": "You are a systematic investigator using algorithmic search to efficiently isolate issues.",
            "guidance": [
                "VERSION CONTROL: Use 'git bisect' or equivalent for commit history searches",
                "DATA PIPELINE: Test data at pipeline midpoints to isolate transformation issues",
                "TIME WINDOWS: For time-based issues, binary search through timestamps",
                "DOCUMENT BOUNDARIES: Clearly record each tested boundary and result",
                "EFFICIENCY: Each test should eliminate ~50% of remaining search space"
            ]
        },
        {
            "id": "phase-1b-test-reduction",
            "title": "Phase 1b: Test Case Minimization",
            "runCondition": {
                "var": "bugSource",
                "equals": "failing_test"
            },
            "prompt": "**TEST REDUCTION** - Simplify failing test:\n\n1. Inline called methods into test\n2. Add earlier assertion to fail sooner\n3. Remove code after new failure point\n4. Repeat until minimal\n\n**OUTPUT**: Minimal failing test case.",
            "agentRole": "You are a surgical debugger who strips away layers to reveal core issues.",
            "guidance": [
                "PRESERVE FAILURE: Each reduction must maintain the original failure mode",
                "INLINE AGGRESSIVELY: Replace method calls with their actual implementation",
                "FAIL EARLY: Move assertions up to find earliest deviation from expected state",
                "REMOVE RUTHLESSLY: Delete all code that doesn't contribute to the failure",
                "CLARITY GOAL: Final test should make the bug obvious to any reader"
            ]
        },
        {
            "id": "phase-2a-hypothesis-development",
            "title": "Phase 2a: Hypothesis Development & Prioritization",
            "prompt": "**HYPOTHESIS GENERATION** - Based on codebase analysis, formulate testable hypotheses about the bug's root cause.\n\n**STEP 1: Evidence-Based Hypothesis Development**\nCreate maximum 5 prioritized hypotheses. Each includes:\n- **Root Cause Theory**: Specific technical explanation\n- **Supporting Evidence**: Code patterns/logic flows supporting this theory\n- **Failure Mechanism**: Exact sequence leading to observed bug\n- **Testability Score**: Quantified assessment (1-10) of validation ease\n- **Evidence Strength Score**: Quantified assessment (1-10) based on code findings\n\n**STEP 2: Hypothesis Prioritization Matrix**\nRank hypotheses using weighted scoring:\n- **Evidence Strength** (40%): Code analysis support for theory\n- **Testability** (35%): Validation ease with debugging instruments\n- **Impact Scope** (25%): How well this explains all symptoms\n\n**CRITICAL RULE**: All hypotheses must be based on concrete evidence from code analysis.\n\n**OUTPUTS**: Maximum 5 hypotheses with quantified scoring, ranked by priority.",
            "agentRole": "You are a senior software detective and root cause analysis expert with deep expertise in systematic hypothesis formation. Your strength lies in connecting code evidence to potential failure mechanisms and creating testable theories. You excel at logical reasoning and evidence-based deduction. You must maintain rigorous quantitative standards and reject any hypothesis not grounded in concrete code evidence.",
            "guidance": [
                "EVIDENCE-BASED ONLY: Every hypothesis must be grounded in concrete code analysis findings with quantified evidence scores",
                "HYPOTHESIS LIMITS: Generate maximum 5 hypotheses to prevent analysis paralysis",
                "QUANTIFIED SCORING: Use 1-10 scales for evidence strength and testability with clear criteria"
            ],
            "validationCriteria": [
                {
                    "type": "contains",
                    "value": "Evidence Strength Score",
                    "message": "Must include quantified evidence strength scoring (1-10) for each hypothesis"
                },
                {
                    "type": "contains",
                    "value": "Testability Score",
                    "message": "Must include quantified testability scoring (1-10) for each hypothesis"
                }
            ],
            "hasValidation": true
        },
        {
            "id": "phase-2b-hypothesis-validation-strategy",
            "title": "Phase 2b: Hypothesis Validation Strategy & Documentation",
            "prompt": "**HYPOTHESIS VALIDATION PLANNING** - For the top 3 hypotheses, create validation strategies and documentation.\n\n**STEP 1: Hypothesis Validation Strategy**\nFor top 3 hypotheses, define:\n- **Required Evidence**: Specific evidence to confirm/refute hypothesis\n- **Debugging Approach**: Instrumentation/tests providing evidence\n- **Success Criteria**: Results proving hypothesis correct\n- **Confidence Threshold**: Minimum evidence quality needed\n\n**STEP 2: Hypothesis Documentation**\nCreate structured registry:\n- **Hypothesis ID**: H1, H2, H3 for tracking\n- **Status**: Active, Refuted, Confirmed\n- **Evidence Log**: Supporting and contradicting evidence\n- **Validation Plan**: Specific testing approach\n\n**STEP 3: Coverage Check**\nEnsure hypotheses cover diverse categories (logic, state, dependencies) with deep analysis.\n\n**OUTPUTS**: Top 3 hypotheses selected for validation with structured documentation and validation plans.",
            "agentRole": "You are a systematic testing strategist and documentation expert. Your strength lies in creating clear validation plans and maintaining rigorous documentation standards for hypothesis tracking and evidence collection.",
            "guidance": [
                "STRUCTURED DOCUMENTATION: Create formal hypothesis registry with tracking IDs and status",
                "VALIDATION RIGOR: Only proceed with top 3 hypotheses that meet minimum evidence thresholds",
                "COMPREHENSIVE PLANNING: Each hypothesis must have clear validation approach and success criteria"
            ],
            "validationCriteria": [
                {
                    "type": "contains",
                    "value": "Hypothesis ID",
                    "message": "Must assign tracking IDs (H1, H2, H3) to each hypothesis"
                },
                {
                    "type": "regex",
                    "pattern": "H[1-3]",
                    "message": "Must use proper hypothesis ID format (H1, H2, H3)"
                }
            ],
            "hasValidation": true
        },
        {
            "id": "phase-2c-prepare-validation",
            "title": "Phase 2c: Prepare Hypothesis Validation",
            "prompt": "**PREPARE VALIDATION ARRAY** - Extract the top 3 hypotheses for systematic validation.\n\n**Create `hypothesesToValidate` array with:**\n```json\n[\n  {\n    \"id\": \"H1\",\n    \"description\": \"[Hypothesis description]\",\n    \"evidenceStrength\": [score],\n    \"testability\": [score],\n    \"validationPlan\": \"[Specific testing approach]\"\n  },\n  // ... H2, H3\n]\n```\n\n**Set context variables:**\n- `hypothesesToValidate`: Array of top 3 hypotheses\n- `currentConfidence`: 0 (will be updated during validation)\n- `validationIterations`: 0 (tracks validation cycles)",
            "agentRole": "You are preparing the systematic validation process by structuring hypotheses for iteration.",
            "guidance": [
                "Extract only the top 3 hypotheses from Phase 2b",
                "Ensure each has complete validation information",
                "Initialize tracking variables for the validation loop"
            ],
            "requireConfirmation": false
        },
        {
            "id": "phase-2d-test-evidence-gathering",
            "title": "Phase 2d: Test-Based Hypothesis Evidence",
            "runCondition": {
                "var": "hypothesesToValidate",
                "exists": true
            },
            "prompt": "**TEST-DRIVEN HYPOTHESIS VALIDATION**\n\nFor each hypothesis in hypothesesToValidate, use checkHypothesisInTests(hypothesis):\n\n**1. Direct Test Evidence**:\n- Find tests that directly test suspected components\n- Analyze test names, descriptions, and assertions\n- Check if tests actually validate what we think\n\n**2. Indirect Test Evidence**:\n- Find tests that would fail if hypothesis is true\n- Look for integration tests touching the area\n- Check for tests that assume opposite behavior\n\n**3. Test Coverage Gaps**:\n- What aspects of hypothesis are NOT tested?\n- Where would a test have caught this bug?\n- What assumptions do tests make?\n\n**4. Test Execution Analysis**:\n- Run tests with debug instrumentation\n- Add temporary logging to tests\n- Compare test expectations vs reality\n\n**5. Historical Test Analysis**:\n- When were relevant tests last modified?\n- Were any tests disabled recently?\n- Do test changes correlate with bug appearance?\n\n**Create TestEvidence Matrix**:\n```\n| Hypothesis | Supporting Tests | Contradicting Tests | Coverage Gaps | Confidence Impact |\n|------------|------------------|---------------------|---------------|-------------------|\n| H1         | TestA, TestB     | TestC (partially)   | Edge case X   | +2 confidence     |\n```\n\n**Update each hypothesis** with test evidence findings.",
            "agentRole": "You are a test analysis specialist validating hypotheses against the existing test suite. Your goal is to use tests as objective evidence for or against each hypothesis.",
            "guidance": [
                "Tests are the codified understanding of system behavior",
                "A hypothesis contradicted by passing tests needs reconsideration",
                "Missing test coverage often indicates where bugs hide",
                "Update hypothesis confidence based on test evidence"
            ],
            "requireConfirmation": false
        },
        {
            "id": "phase-3-4-5-validation-loop",
            "type": "loop",
            "title": "Hypothesis Validation Loop (Phases 3-4-5)",
            "loop": {
                "type": "forEach",
                "items": "hypothesesToValidate",
                "itemVar": "currentHypothesis",
                "indexVar": "hypothesisIndex",
                "maxIterations": 5
            },
            "body": [
                {
                    "id": "loop-phase-3-instrumentation",
                    "title": "Phase 3: Debug Instrumentation for {{currentHypothesis.id}}",
                    "prompt": "**DEBUGGING INSTRUMENTATION for {{currentHypothesis.id}}**\n\n**Hypothesis**: {{currentHypothesis.description}}\n\n**IMPLEMENT SMART LOGGING**:\n\n1. **Standard Format**: Use instrumentCode(location, '{{currentHypothesis.id}}')\n   ```\n   className.methodName [{{currentHypothesis.id}}] {timestamp}: Specific message\n   ```\n\n2. **Deduplication Implementation**:\n   ```javascript\n   // Add to each instrumentation point\n   const debugState = { lastMsg: '', count: 0 };\n   function smartLog(msg) {\n     if (debugState.lastMsg === msg) {\n       debugState.count++;\n       if (debugState.count % 10 === 0) {\n         console.log(`[{{currentHypothesis.id}}] ${msg} x${debugState.count}`);\n       }\n     } else {\n       if (debugState.count > 1) {\n         console.log(`[{{currentHypothesis.id}}] Previous message x${debugState.count}`);\n       }\n       console.log(`[{{currentHypothesis.id}}] ${msg}`);\n       debugState.lastMsg = msg;\n       debugState.count = 1;\n     }\n   }\n   ```\n\n3. **Operation Grouping**:\n   ```javascript\n   console.log(`=== {{currentHypothesis.id}}: Operation ${opName} Start ===`);\n   const startTime = Date.now();\n   // ... operation code with smartLog() calls ...\n   console.log(`=== {{currentHypothesis.id}}: Operation ${opName} End (${Date.now() - startTime}ms) ===`);\n   ```\n\n4. **Test Instrumentation**:\n   - Add debugging to relevant test files\n   - Instrument test setup/teardown\n   - Log test assumptions vs actual behavior\n\n5. **High-Frequency Aggregation**:\n   - For loops/iterations, log summary every 100 iterations\n   - For events, create time-window summaries\n   - Track unique values and their counts\n\n**OUTPUT**: Instrumented code ready to produce clean, manageable logs for {{currentHypothesis.id}}",
                    "agentRole": "You are instrumenting code specifically to validate hypothesis {{currentHypothesis.id}}. Focus on targeted evidence collection.",
                    "guidance": [
                        "This is hypothesis {{hypothesisIndex + 1}} of {{hypothesesToValidate.length}}",
                        "Tailor instrumentation to the specific hypothesis",
                        "Ensure non-intrusive implementation"
                    ],
                    "requireConfirmation": false
                },
                {
                    "id": "loop-phase-4-evidence",
                    "title": "Phase 4: Evidence Collection for {{currentHypothesis.id}}",
                    "prompt": "**EVIDENCE COLLECTION for {{currentHypothesis.id}}**\n\n**Execute instrumented code and collect evidence:**\n1. Run the instrumented test/reproduction\n2. Collect all {{currentHypothesis.id}}_DEBUG logs\n3. Analyze results against validation criteria\n4. Document evidence quality and relevance\n\n**TEST EXECUTION EVIDENCE**:\n- Run instrumented tests for {{currentHypothesis.id}}\n- Collect test debug output\n- Note any test failures or unexpected behavior\n- Compare with production bug behavior\n\n**EVIDENCE ASSESSMENT:**\n- Does evidence support {{currentHypothesis.id}}? (Yes/No/Partial)\n- Evidence quality score (1-10)\n- Contradicting evidence found?\n- Additional evidence needed?\n\n**If log volume >500 lines, use aggregateDebugLogs() and create sub-analysis prompt.**\n\n**OUTPUT**: Evidence assessment for {{currentHypothesis.id}} with quality scoring",
                    "agentRole": "You are collecting and analyzing evidence specifically for hypothesis {{currentHypothesis.id}}.",
                    "guidance": [
                        "Focus on evidence directly related to this hypothesis",
                        "Be objective in assessment - negative evidence is valuable",
                        "Track evidence quality quantitatively"
                    ],
                    "requireConfirmation": false
                },
                {
                    "id": "loop-phase-5-synthesis",
                    "title": "Phase 5: Evidence Synthesis for {{currentHypothesis.id}}",
                    "prompt": "**EVIDENCE SYNTHESIS for {{currentHypothesis.id}}**\n\n**Synthesize findings:**\n1. **Evidence Summary**: What did we learn about {{currentHypothesis.id}}?\n2. **Confidence Update**: Based on evidence, rate confidence this is the root cause (0-10)\n3. **Status Update**: Mark hypothesis as Confirmed/Refuted/Needs-More-Evidence\n\n**If {{currentHypothesis.id}} is confirmed with high confidence (>8.0):**\n- Set `rootCauseFound` = true\n- Set `rootCauseHypothesis` = {{currentHypothesis.id}}\n- Update `currentConfidence` with confidence score\n\n**If all hypotheses validated but confidence <9.0:**\n- Consider additional investigation needs\n- Document what evidence is still missing",
                    "agentRole": "You are synthesizing evidence to determine if {{currentHypothesis.id}} is the root cause.",
                    "guidance": [
                        "Update hypothesis status based on evidence",
                        "Track overall investigation confidence",
                        "Be ready to exit loop if root cause found with high confidence"
                    ],
                    "requireConfirmation": false
                }
            ],
            "runCondition": {
                "and": [
                    { "var": "rootCauseFound", "not_equals": true },
                    { "var": "validationIterations", "lt": 3 }
                ]
            },
            "requireConfirmation": false
        },
        {
            "id": "phase-4a-controlled-experimentation",
            "title": "Phase 4a: Controlled Code Experiments",
            "runCondition": {
                "var": "currentConfidence",
                "lt": 8.0
            },
            "prompt": "**CONTROLLED EXPERIMENTATION** - When observation isn't enough, experiment!\n\n**Current Top Hypothesis**: {{hypothesesToValidate[0].id}} (Confidence: {{currentConfidence}}/10)\n\n**EXPERIMENT TYPES** (use controlledModification()):\n\n1. **Guard Additions (Non-Breaking)**:\n   ```javascript\n   // Add defensive check that logs but doesn't change behavior\n   if (unexpectedCondition) {\n     console.error('[H1_GUARD] Unexpected state detected:', state);\n     // Continue normal execution\n   }\n   ```\n\n2. **Assertion Injections**:\n   ```javascript\n   // Add assertion that would fail if hypothesis is correct\n   console.assert(expectedCondition, '[H1_ASSERT] Hypothesis H1 violated!');\n   ```\n\n3. **Minimal Fix Test**:\n   ```javascript\n   // Apply minimal fix for hypothesis, see if bug disappears\n   if (process.env.DEBUG_FIX_H1 === 'true') {\n     // Apply hypothesized fix\n     return fixedBehavior();\n   }\n   ```\n\n4. **Controlled Breaking**:\n   ```javascript\n   // Temporarily break suspected component to verify involvement\n   if (process.env.DEBUG_BREAK_H1 === 'true') {\n     throw new Error('[H1_BREAK] Intentionally breaking to test hypothesis');\n   }\n   ```\n\n**PROTOCOL**:\n1. Choose experiment type based on confidence and risk\n2. Implement modification with clear DEBUG markers\n3. Use createInvestigationBranch() if not already on investigation branch\n4. Commit: `git commit -m \"DEBUG: {{experiment_type}} for {{currentHypothesis.id}}\"`\n5. Run reproduction steps\n6. Use collectEvidence() to gather results\n7. Revert changes: `git revert HEAD`\n8. Document results in ExperimentResults/{{currentHypothesis.id}}.md\n\n**SAFETY LIMITS**:\n- Max 3 experiments per hypothesis\n- Each experiment in separate commit\n- Always revert after evidence collection\n- Document everything in INVESTIGATION_CONTEXT.md\n\n**UPDATE** hypothesis confidence based on experimental results.",
            "agentRole": "You are a careful experimenter using controlled code modifications to validate hypotheses. Safety and reversibility are paramount.",
            "guidance": [
                "Start with non-breaking experiments (guards, logs)",
                "Only use breaking experiments if essential",
                "Every change must be easily reversible",
                "Document rationale for each experiment type",
                "Consider test environment experiments first"
            ],
            "requireConfirmation": true,
            "validationCriteria": [
                {
                    "type": "contains",
                    "value": "commit",
                    "message": "Must specify commit message for experiment"
                }
            ]
        },
        {
            "id": "phase-3a-observability-setup",
            "title": "Phase 3a: Distributed System Observability",
            "runCondition": {
                "var": "isDistributed",
                "equals": true
            },
            "prompt": "**OBSERVABILITY** - Set up three-pillar strategy:\n\n**METRICS**: Identify key indicators (latency, errors)\n**TRACES**: Enable request path tracking\n**LOGS**: Ensure correlation IDs present\n\n**OUTPUT**: Observability checklist completed.",
            "agentRole": "You are a distributed systems expert who thinks in terms of emergent behaviors and system-wide patterns.",
            "guidance": [
                "METRICS SELECTION: Focus on RED metrics (Rate, Errors, Duration) for each service",
                "TRACE COVERAGE: Ensure spans cover all service boundaries and key operations",
                "CORRELATION IDS: Verify IDs propagate through entire request lifecycle",
                "AGGREGATION READY: Set up centralized collection for cross-service analysis",
                "BASELINE ESTABLISHMENT: Capture normal behavior metrics for comparison"
            ]
        },
        {
            "id": "phase-4a-distributed-evidence",
            "title": "Phase 4a: Multi-Service Evidence Collection",
            "runCondition": {
                "var": "isDistributed",
                "equals": true
            },
            "prompt": "**DISTRIBUTED ANALYSIS**:\n\n1. Check METRICS for anomalies\n2. Follow TRACES for request path\n3. Correlate LOGS across services\n4. Identify cascade points\n\n**OUTPUT**: Service interaction map with failure points.",
            "agentRole": "You are a systems detective who can trace failures across service boundaries.",
            "guidance": [
                "ANOMALY DETECTION: Look for deviations in latency, error rates, or traffic patterns",
                "TRACE ANALYSIS: Follow request ID through all services to find failure point",
                "LOG CORRELATION: Use timestamp windows and correlation IDs to link events",
                "CASCADE IDENTIFICATION: Look for timeout chains or error propagation patterns",
                "VISUAL MAPPING: Create service dependency diagram with failure annotations"
            ]
        },
        {
            "id": "phase-4b-cognitive-reset",
            "title": "Phase 4b: Cognitive Reset & Progress Review",
            "runCondition": {
                "var": "validationIterations",
                "gte": 2
            },
            "prompt": "**COGNITIVE RESET** - Step back and review:\n\n1. Summarize findings so far\n2. List eliminated possibilities\n3. Identify investigation blind spots\n4. Reformulate approach if needed\n\n**DECIDE**: Continue current path or pivot strategy?",
            "agentRole": "You are a strategic advisor who helps maintain perspective during complex investigations.",
            "guidance": [
                "PROGRESS SUMMARY: Write concise bullet points of key findings and eliminations",
                "BLIND SPOT CHECK: What areas haven't been investigated? What assumptions remain?",
                "PATTERN RECOGNITION: Look for investigation loops or repeated dead ends",
                "STRATEGY EVALUATION: Is current approach yielding diminishing returns?",
                "PIVOT CRITERIA: Consider new approach if last 3 iterations provided no new insights"
            ]
        },
        {
            "id": "phase-5a-final-confidence",
            "title": "Phase 5a: Final Confidence Assessment",
            "prompt": "**FINAL CONFIDENCE ASSESSMENT** - Evaluate the investigation results.\n\n**If root cause found (rootCauseFound = true):**\n- Review all evidence for {{rootCauseHypothesis}}\n- Perform adversarial challenge\n- Calculate final confidence score\n\n**If no high-confidence root cause:**\n- Document what was learned\n- Identify remaining unknowns\n- Recommend next investigation steps\n\n**CONFIDENCE CALCULATION:**\n- Evidence Quality (1-10)\n- Explanation Completeness (1-10)\n- Alternative Likelihood (1-10, inverted)\n- Final = (Quality × 0.4) + (Completeness × 0.4) + (Alternative × 0.2)\n\n**OUTPUT**: Final confidence assessment with recommendations",
            "agentRole": "You are making the final determination about the root cause with rigorous confidence assessment.",
            "guidance": [
                "Be honest about confidence levels",
                "Document all remaining uncertainties",
                "Provide clear next steps if confidence is low"
            ],
            "validationCriteria": [
                {
                    "type": "regex",
                    "pattern": "Final.*=.*[0-9\\.]+",
                    "message": "Must calculate final confidence score"
                }
            ],
            "hasValidation": true
        },
        {
            "id": "phase-2c-hypothesis-assumptions",
            "title": "Phase 2c: Hypothesis Assumption Audit",
            "prompt": "**AUDIT** each hypothesis for hidden assumptions:\n\n**FOR EACH HYPOTHESIS**:\n- List implicit assumptions\n- Rate assumption confidence (1-10)\n- Identify verification approach\n\n**REJECT** hypotheses built on unverified assumptions.",
            "agentRole": "You are a rigorous scientist who rejects any hypothesis not grounded in verified facts.",
            "guidance": [
                "EXPLICIT LISTING: Write out every assumption, no matter how obvious it seems",
                "CONFIDENCE SCORING: Rate 1-10 based on evidence quality, not intuition",
                "VERIFICATION PLAN: For each assumption, specify how it can be tested",
                "REJECTION CRITERIA: Any assumption with confidence <7 requires verification",
                "DOCUMENT RATIONALE: Explain why each assumption is accepted or needs testing"
            ],
            "validationCriteria": [
                {
                    "type": "contains",
                    "value": "Assumption confidence",
                    "message": "Must rate assumption confidence for each hypothesis"
                }
            ],
            "hasValidation": true
        },
        {
            "id": "phase-6-diagnostic-writeup",
            "title": "Phase 6: Comprehensive Diagnostic Writeup",
            "prompt": "**FINAL DIAGNOSTIC DOCUMENTATION** - I will create comprehensive writeup enabling effective bug fixing and knowledge transfer.\n\n**STEP 1: Executive Summary**\n- **Bug Summary**: Concise description of issue and impact\n- **Root Cause**: Clear, non-technical explanation of what is happening\n- **Confidence Level**: Final confidence assessment with calculation methodology\n- **Scope**: What systems, users, or scenarios are affected\n\n**STEP 2: Technical Deep Dive**\n- **Root Cause Analysis**: Detailed technical explanation of failure mechanism\n- **Code Component Analysis**: Specific files, functions, and lines with exact locations\n- **Execution Flow**: Step-by-step sequence of events leading to bug\n- **State Analysis**: How system state contributes to failure\n\n**STEP 3: Investigation Methodology**\n- **Investigation Timeline**: Chronological summary with phase time investments\n- **Hypothesis Evolution**: Complete record of hypotheses (H1-H5) with status changes\n- **Evidence Assessment**: Rating and reliability of evidence sources with key citations\n\n**STEP 4: Knowledge Transfer & Action Plan**\n- **Skill Requirements**: Technical expertise needed for understanding and fixing\n- **Prevention & Review**: Specific measures and code review checklist items\n- **Action Items**: Immediate mitigation steps and permanent fix areas with timelines\n- **Testing Strategy**: Comprehensive verification approach for fixes\n\n**DELIVERABLE**: Enterprise-grade diagnostic report enabling confident bug fixing, knowledge transfer, and organizational learning.",
            "agentRole": "You are a senior technical writer and diagnostic documentation specialist with expertise in creating comprehensive, actionable bug reports for enterprise environments. Your strength lies in translating complex technical investigations into clear, structured documentation that enables effective problem resolution, knowledge transfer, and organizational learning. You excel at creating reports that serve immediate fixing needs, long-term system improvement, and team collaboration.",
            "guidance": [
                "ENTERPRISE FOCUS: Write for multiple stakeholders including developers, managers, and future team members",
                "KNOWLEDGE TRANSFER: Include methodology and reasoning, not just conclusions",
                "COLLABORATIVE DESIGN: Structure content for peer review and team coordination",
                "COMPREHENSIVE COVERAGE: Include all information needed for resolution and prevention",
                "ACTIONABLE DOCUMENTATION: Provide specific, concrete next steps with clear ownership"
            ]
        }
    ]
}