{
    "id": "coding-task-workflow",
    "name": "Excellent Adaptive Coding Workflow with Devil's Advocate Review",
    "version": "1.0.0",
    "description": "A comprehensive and resilient workflow for AI-assisted coding. It adaptively sizes tasks, performs a critical self-review of its own plans, provides efficiency options, enforces closed-loop validation, and defines a robust protocol for handling failures.",
    "preconditions": [
      "User has a clear task description (e.g., from Jira, a dev doc, or a BRD).",
      "The agent has access to necessary tools like `grep`, file readers/editors, and a terminal for commands.",
      "The agent has access to the relevant codebase files."
    ],
    "metaGuidance": [
      "This workflow follows the PREP -> IMPLEMENT -> VERIFY pattern for each step in the plan.",
      "Human approval is required after the Devil's Advocate review and before final completion.",
      "Each implementation step should be a small, logical, and committable chunk of work.",
      "The agent should never guess or assume. Always ask for clarification or use tools to find missing information.",
      "Maintain existing coding conventions and architectural patterns found in the codebase."
    ],
    "steps": [
      {
        "id": "phase-0-triage",
        "title": "Phase 0: Task Triage & Complexity Sizing",
        "prompt": "Welcome to the Adaptive Coding Workflow. To begin, please provide the task description and classify its complexity. This will determine the path we take.\n\n**Task Description:**\n[User inserts detailed task description here]\n\n**Complexity Classification:**\nPlease choose one: **[S]mall**, **[M]edium**, or **[L]arge**.",
        "guidance": [
          "**[S]mall Path (Fast Track):** For simple, low-risk changes like single-function refactors or minor bug fixes. This path skips formal analysis and planning, moving directly to a condensed implementation phase.",
          "**[M]edium Path (Standard):** For standard feature work or tasks involving multiple files. This is the default path, including full scoping, planning, and iterative implementation.",
          "**[L]arge Path (Comprehensive):** For major features, architectural changes, or tasks in unfamiliar codebases. This path follows the full standard process but makes the 'Deep Codebase Analysis' mandatory."
        ]
      },
      {
        "id": "phase-1-scoping",
        "title": "Phase 1: Task Briefing & Scope Definition (For M/L Tasks)",
        "prompt": "Your first goal is to understand the task. Analyze the following request, summarize your understanding, ask clarifying questions, and assess which parts of the codebase are relevant.\n\n**Task Description:**\n[User inserts detailed task description here]\n\n**Key Objectives & Success Criteria:**\n[User lists specific, measurable success criteria here]\n\n**Scope and Constraints:**\n[User defines boundaries or areas to avoid here]\n\nFinally, based on your analysis, perform a sanity check on the initial complexity sizing. If you believe the user's classification of [M/L] is incorrect, state your reasoning and ask for their confirmation before proceeding. For example: 'You classified this as [M]edium, but my analysis shows it impacts several core architectural components. I recommend we upgrade to the [L]arge path to perform a Deep Analysis. Do you agree?'",
        "guidance": [
          "This step is skipped for [S]mall tasks.",
          "Provide a complete task description. Vague requests will lead to poor plans and wasted effort."
        ]
      },
      {
        "id": "phase-1b-deep-analysis",
        "title": "Phase 1b: Optional/Mandatory Deep Codebase Analysis (For M/L Tasks)",
        "prompt": "Your goal is to become an expert on the attached codebase. Perform a deep analysis and internalize the code. Your analysis must include:\n1.  **Architecture:** Main modules, layers, and patterns.\n2.  **Key Concepts:** Core models, conventions, and important components.\n3.  **Execution Flow:** Trace major features or entry points.\n4.  **Code Quality Assessment:** Note maintainability, readability, or coupling issues.\n5.  **Testing Strategy:** Describe how the code is tested.\n6.  **Opportunities:** Suggest refactorings or improvements.\n\nProvide summaries and code examples to illustrate your findings. Be exhaustive, as if preparing onboarding documentation for a senior engineer.",
        "askForFiles": true,
        "guidance": [
          "This step is mandatory for [L]arge tasks and optional for [M]edium tasks, based on the outcome of Phase 1.",
          "Ensure all relevant source files are attached or accessible to the agent before running this step."
        ]
      },
      {
        "id": "phase-2-planning",
        "title": "Phase 2: Create Detailed Implementation Plan (For M/L Tasks)",
        "prompt": "Your goal is to produce a thorough and actionable plan of attack. Do not write any code. Your plan must be detailed, broken into committable phases, and justified.\n\nYour plan must include these sections:\n1.  **Goal Clarification:** Your understanding of the goal, assumptions, and success criteria.\n2.  **Impact Assessment:** Affected codebase parts, dependencies, and risks.\n3.  **Implementation Strategy:** A list of discrete, actionable steps. Each step must detail the task, its rationale, inputs, and outputs.\n4.  **Final Review Checklist:** A specific checklist of items that must be verified to consider this entire task complete. This will be used in the final review phase.\n\nPresent this as a formal proposal.",
        "guidance": [
          "This step is skipped for [S]mall tasks.",
          "The agent will now proceed to critique its own plan in the next step. Withhold your final approval until after that critique."
        ]
      },
      {
        "id": "phase-2b-devil-advocate-review",
        "title": "Phase 2b: Devil's Advocate Plan Review",
        "prompt": "Your new goal is to act as a skeptical but fair senior principal engineer. Your task is to perform a 'devil's advocate' review of the implementation plan you just created in Phase 2. The objective is not to discard the plan, but to rigorously stress-test it and make it stronger. Your critique must be balanced and evidence-based.\n\nAnalyze the plan through the following lenses. For every point you make (positive or negative), you must cite specific evidence from the plan, the codebase, or the initial task description.\n\n1.  **Hidden Assumptions:** What assumptions does this plan make about the codebase, user behavior, or existing data that might be incorrect?\n2.  **Potential Risks & Unintended Side Effects:** What is the biggest risk of this plan? Could it impact performance, security, or another feature in a negative way?\n3.  **Overlooked Complexities or Edge Cases:** What specific edge cases (e.g., empty states, invalid inputs, race conditions) does the plan fail to explicitly address?\n4.  **Alternative Approaches:** Briefly propose at least one alternative technical approach. What are the pros and cons of the alternative versus the current plan?\n5.  **Plan Strengths:** To ensure a balanced review, explicitly state the strongest parts of the plan. What aspects are well-thought-out and likely to succeed?\n\nConclude with a balanced summary. If you found issues, provide concrete suggestions for how to amend the plan. Finally, give a confidence score (1-10) for the plan *if* your suggestions are implemented.",
        "guidance": [
          "This is a critical thinking step. The agent's goal is to find weaknesses in its *own* prior work to improve it. This is a sign of a high-functioning process.",
          "Evaluate the agent's points. Not all 'risks' it identifies may be realistic. Use your judgment to decide which suggestions to incorporate into the plan.",
          "After this review, you can ask the agent to create a final, amended version of the plan before you give your final approval to proceed with implementation."
        ],
        "requireConfirmation": true
      },
      {
        "id": "phase-3-iterative-implementation",
        "title": "Phase 3: Iterative Implementation (PREP -> IMPLEMENT -> VERIFY)",
        "prompt": "The implementation phase has now begun. **Please provide me with the next single step from the approved plan.** If we are on the 'Small' path, provide a single, clear implementation instruction.\n\nI will execute *only* that step using the PREP -> IMPLEMENT -> VERIFY cycle defined in the guidance below, and then await your command for the subsequent step. This process will repeat until all steps are complete.",
        "guidance": [
          "**Efficiency Tip:** For high-confidence plans, you may provide multiple step instructions at once. I will execute them sequentially, performing the P->I->V cycle for each, and will only pause to ask for input if I encounter a verification failure or ambiguity.",
          "**PREP:** Before implementing each step, you must first PREPARE. Re-read the step's description, confirm the previous step was completed correctly, verify the plan for this step is still valid in the current codebase, and list all required inputs or files. Do not proceed if anything is unclear.",
          "**IMPLEMENT:** After preparation is confirmed, you will IMPLEMENT the step. Focus only on this single step. Use your tools to make the necessary code changes, adhering to all quality standards. Provide a commit message upon completion.",
          "**VERIFY:** Immediately after implementation, you must VERIFY your work. Your verification for this step **is not complete until you have**:\n1.  **Written necessary unit/integration tests** for the new logic.\n2.  **Run the full test suite** to ensure no regressions were introduced.\n3.  **Performed a critical self-review** of the changes against the plan, checking for code quality, side effects, and architectural alignment.\n\n**Failure Protocol:** If a verification failure cannot be resolved after two attempts, you must halt. Do not try a third time. Instead, present a summary of the problem, detail your failed attempts, and recommend a course of action to the user (e.g., 'revert this step and re-plan', 'request more information', 'proceed with a known issue')."
        ]
      },
      {
        "id": "phase-4-final-review",
        "title": "Phase 4: Final Review & Completion",
        "prompt": "All planned steps have been implemented and verified. Your final goal is to perform a holistic review by validating the work against the **'Final Review Checklist'** created and approved during Phase 2.\n\nFor each item on that checklist, provide a confirmation and evidence that it has been met. Conclude with a summary of any potential follow-ups or new dependencies to note.",
        "guidance": [
          "This is the final quality check. Ensure the agent's summary and checklist validation align with your understanding of the completed work."
        ],
        "requireConfirmation": true
      }
    ]
  }
