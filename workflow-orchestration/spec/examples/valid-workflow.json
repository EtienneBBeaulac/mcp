{
    "id": "simple-auth-implementation",
    "name": "Simple Authentication Implementation",
    "description": "Implement basic JWT authentication for a REST API with user login and token validation",
    "version": "0.1.0",
    "preconditions": [
        "User model exists in the database",
        "JWT library is installed in the project",
        "Environment variables for JWT_SECRET are configured"
    ],
    "clarificationPrompts": [
        "What is the token expiration time you want to use?",
        "Should the authentication support refresh tokens?",
        "Do you need role-based access control?"
    ],
    "steps": [
        {
            "id": "analyze-current-auth",
            "title": "Analyze current authentication setup",
            "prompt": "Examine the existing authentication implementation if any. Look for: user model structure, existing auth middleware, login endpoints. Document what you find.",
            "agentRole": "You are a security-focused systems analyst with expertise in authentication architecture. Your role is to thoroughly assess existing auth implementations, identify security vulnerabilities, and document current patterns to ensure new implementations align with security best practices.",
            "requireConfirmation": true
        },
        {
            "id": "create-auth-middleware",
            "title": "Create authentication middleware",
            "prompt": "Create a middleware function that extracts and validates JWT tokens from the Authorization header. Return 401 for invalid tokens.",
            "agentRole": "You are a senior backend engineer specializing in secure middleware development. Focus on implementing robust token validation, proper error handling, and following security best practices for JWT token processing. Ensure your implementation is production-ready and follows the principle of least privilege.",
            "askForFiles": true,
            "validationCriteria": [
                {
                    "type": "contains",
                    "value": "jwt",
                    "message": "Implementation should include JWT token handling"
                },
                {
                    "type": "contains",
                    "value": "Authorization",
                    "message": "Should extract token from Authorization header"
                },
                {
                    "type": "regex",
                    "pattern": "\\b(401|unauthorized)\\b",
                    "flags": "i",
                    "message": "Should return 401 status for invalid tokens"
                }
            ],
            "hasValidation": true
        },
        {
            "id": "implement-login",
            "title": "Implement login endpoint",
            "prompt": "Create a POST /auth/login endpoint that accepts email and password, validates credentials against the database, and returns a JWT token on success.",
            "agentRole": "You are an API development specialist with deep expertise in authentication endpoints and security. Your implementation should include proper input validation, secure password handling, rate limiting considerations, and comprehensive error responses that don't leak sensitive information.",
            "validationCriteria": [
                {
                    "type": "contains",
                    "value": "POST",
                    "message": "Should implement POST endpoint"
                },
                {
                    "type": "regex",
                    "pattern": "/(auth/)?login",
                    "message": "Should implement login endpoint"
                },
                {
                    "type": "contains",
                    "value": "email",
                    "message": "Should handle email authentication"
                },
                {
                    "type": "contains",
                    "value": "password",
                    "message": "Should handle password authentication"
                },
                {
                    "type": "contains",
                    "value": "jwt",
                    "message": "Should return JWT token"
                }
            ],
            "hasValidation": true
        },
        {
            "id": "test-authentication",
            "title": "Test the authentication flow",
            "prompt": "Test the complete flow: 1) Login with valid credentials, 2) Use the token to access a protected route, 3) Verify invalid tokens are rejected",
            "agentRole": "You are a quality assurance engineer specializing in security testing and authentication flows. Your testing approach should be comprehensive, covering positive and negative test cases, edge cases, and potential security vulnerabilities. Focus on creating maintainable, automated tests that verify both functionality and security.",
            "requireConfirmation": true,
            "validationCriteria": [
                {
                    "type": "contains",
                    "value": "valid credentials",
                    "condition": {
                        "var": "testType",
                        "equals": "comprehensive"
                    },
                    "message": "Should test login with valid credentials"
                },
                {
                    "type": "contains",
                    "value": "protected route",
                    "message": "Should test access to protected routes"
                },
                {
                    "type": "contains",
                    "value": "invalid tokens",
                    "message": "Should verify invalid token rejection"
                },
                {
                    "type": "regex",
                    "pattern": "\\b(test|spec|describe|it)\\b",
                    "message": "Should include proper test structure"
                }
            ],
            "hasValidation": true
        }
    ],
    "metaGuidance": [
        "Always hash passwords using bcrypt or similar",
        "Include proper error messages for debugging",
        "Follow RESTful conventions for endpoints",
        "Add rate limiting to prevent brute force attacks",
        "Each step leverages specialized agent expertise through agentRole field",
        "Agent roles provide behavioral guidance separate from user-facing prompts"
    ]
}